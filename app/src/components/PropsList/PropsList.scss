@charset "UTF-8";
@import 'variables';

// Type classnames
$prop-input: 'prop-type-input';
$prop-textarea: 'prop-type-textarea';
$prop-list: 'prop-type-list';
$prop-constructor: 'prop-type-constructor';
$prop-array: 'prop-type-array';
$prop-toggle: 'prop-type-toggle';

@include exports(props-list) {
    // =================================================================================================================
    // LIST
    // =================================================================================================================
    .props-list,
    .prop-tree_list {

        .prop-item-wrapper.has-image + & {
            // margin-left: $props-image-level-offset - $prop-item-padding-x + $props-level-offset;

            margin-left: -$prop-item-padding-x;
            padding-left: $props-image-level-offset + $props-level-offset !important;
        }


        .sublevel-is-visible + & {
            opacity: 1;
            pointer-events: initial;
            position: relative;
            padding: $prop-list-padding;
            margin-top: $props-list-margin-top;
            padding-top: 0;
        }
    }

    .prop-tree_list {
        .sublevel-is-visible + & .props-list {
            opacity: 1;
            pointer-events: initial;
            position: relative;
        }
    }


    // =================================================================================================================
    // PROPS ITEM
    // =================================================================================================================
    .prop-item {
        margin: 0 (-$prop-item-padding-x);
        width: calc(100% + #{$prop-item-padding-x*2});
        max-width: calc(100% + #{$prop-item-padding-x*2});
        padding: $prop-item-padding-y $prop-item-padding-x;
        min-height: $prop-action-box-size + $prop-item-padding-y*2;

        &.sublevel-is-visible {
            padding-top: $prop-item-opened-padding-y;
            padding-bottom: $prop-item-opened-padding-y;
            background-color: $prop-item-opened-bg-color;
            border-top: $prop-item-opened-border-thickness solid $prop-item-opened-border-color;
            border-bottom: $prop-item-opened-border-thickness solid $prop-item-opened-border-color;
        }
    }

    .prop-item-wrapper {
        display: flex;
        align-items: flex-start;
    }

    .prop-item-content-box {
        flex-grow: 1;
        max-width: 100%;
        flex-direction: column;
        justify-content: center;
        min-height: $prop-action-box-size;
        display: flex;

        .has-image & {
            min-height: $prop-image-size;
            justify-content: center;
        }

    }

    // Props Image
    .prop-item-image-box {
        background-color: $prop-image-bg-color;
        width: $prop-image-size;
        height: $prop-image-size;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: $prop-image-spacing;
        background-repeat: no-repeat;
        background-position: center;
        background-size: cover;
        flex-shrink: 0;

        @include user-select;

        img {
            max-width: 100%;
            max-height: 100%;
        }
    }

    // Prop subcomponent
    .prop_subcomponent {
        min-height: $prop-action-box-size;
        display: flex;
        align-items: center;

        .checkbox-content {
            display: flex;
        }
    }

    // Prop Actions
    .prop_actions {
        display: flex;
        flex-shrink: 0;
        //margin-top: $prop-actions-margin-top;
        height: $prop-action-height + $prop-action-margin-y;

        &.prop_actions-left {
            margin-left: -$prop-action-margin-x;
            margin-right: $prop-action-margin-x;
        }
        &.prop_actions-right {
            margin-left: $prop-action-margin-x;
            margin-right: -$prop-action-margin-x;
        }
    }

    .prop_action {
        display: flex;
        flex-shrink: 0;
        margin: $prop-action-margin-y $prop-action-margin-x;

        &,
        .button-icon {
            @include icon-size(
                            $prop-action-box-size,
                            $prop-action-img-size);

            @include icon-style($prop-action-color);

            &:hover,
            &:focus {
                @include icon-style($prop-action-hover-color);
            }
        }

        .button {
            min-height: 0;
            border: 0 solid transparent;
        }

        .has-image & {
            height: $prop-image-size;
            display: flex;
            align-items: center;
        }
    }

    .prop-item-wrapper.sublevel-is-visible .prop_action-collapse .button{
        transform: rotate(90deg);
    }


    .prop_action-toggle {
        display: flex;
        align-items: center;
        width: auto;
    }

    // Icon
    // TODO does it still in use?
    .prop-item-icon {
        cursor: $cursor-pointer;
        border-radius: $prop-icon-border-radius;

        &,
        .button-icon {
            @include icon-size(
                            $prop-icon-box-size,
                            $prop-icon-img-size);

            @include icon-style($prop-icon-color);

            &:hover,
            &:focus {
                @include icon-style($prop-icon-hover-color);
            }
        }

        &:hover,
        &:focus {
            .button {
                background-color: $prop-icon-hover-bg-color;
            }
        }
    }

    .prop-item-icon-left { margin-right: $prop-icon-margin; }
    .prop-item-icon-right { margin-left: $prop-icon-margin; }

    .prop-item-icon-collapse {
        .sublevel-is-visible & .button{
            transform: rotate(90deg);
            @include single-transition(transform);
        }
    }

    // MESSAGE
    .prop-item_message-wrapper {
        font-size: fs(-1);
        color: $color-text-medium;
        line-height: 1.25;

        .prop-color-scheme-alert & {
            color: $color-alert
        }
    }


    // =================================================================================================================
    // PROPS TYPES
    // =================================================================================================================
    .prop_action-toggle {

    }

    .prop-item_label-box {
        display: flex;
        width: 100%;
    }

    .prop-item_require-mark {
        $size: $base-module*1.75;

        margin-right: $base-module/2;
        display: flex;
        align-items: center;
        height: $prop-label-font-size*$prop-label-line-height*2;

        .require-mark {
            border-radius: $global-rounded;
            background-color: $color-alert;
            flex-shrink: 0;

            @include icon-size(
                    $size,
                    rem-calc(8)
            );

            @include icon-style($white);

            .requirement-is-fulfilled & {
                background-color: $color-success;
            }
        }

    }

    .prop-item-label {
        flex-grow: 1;
        font-size: $prop-label-font-size;
        line-height: $prop-label-line-height;
        font-weight: $prop-label-font-weight;
        text-transform: $prop-label-text-transform;
        color: $prop-label-color;
        display: flex;
        margin-bottom: $prop-label-margin-bottom;
        position: relative;
        min-height: $prop-action-box-size;
        align-items: center;

        @include user-select();

        .prop-item-wrapper.has-required-sign & {
            padding-left: $prop-required-size + $base-module/2;
        }
        .prop-item-wrapper.has-required-sign &::before {
            content: '';
            width: $prop-required-size;
            height: $prop-required-size;
            flex-shrink: 0;
            display: block;
            border-radius: 50%;
            background-color: $color-alert;

            position: absolute;
            top: $prop-label-font-size*$prop-label-line-height/2 + rem-calc(1); // rem-calc(1) - for visual balance
            transform: translateY(-50%);
            left: 0;
        }
    }


    .prop-item_label-text {
        margin-right: $base-module/2;

        .is-flat-array .props-list & { color: $prop-label-flat-color; }

        .#{$prop-input} &,
        .#{$prop-textarea} &,
        .#{$prop-list} & {
            font-size: fs(-1);
            color: $grey-600
        }
    }

    .prop-item_type {
        font-size: fs(-1);
        color: $grey-500;
        margin-right: $base-module/2;
    }

    // PROP: input
    // =================================================================================================================
    .prop-type-input {
        & > * {
            width: 100%;
            max-width: 100%;
        }
    }

    // PROP: textarea
    // =================================================================================================================
    .prop-type-textarea {
        & > * {
            width: 100%;
            max-width: 100%;
        }
    }

    // =================================================================================================================
    // PROP: tree
    // =================================================================================================================
    .prop-item-tree-wrapper {
        width: 100%;
    }

    .prop-tree {
        .block-content-box-heading {
            padding-left: 0;
            padding-right: 0;
            margin-top: 0;

            .prop-item-label {
                font-size: inherit;
                color: inherit;
                font-weight: inherit;
                text-transform: inherit;
                line-height: inherit;
            }
        }
    }

    .prop-tree_field-new_row {
        & + & { margin-top: $prop-new-field-element-spacing }
    }

    // LIST
    .prop-tree-list {
        .sublevel-is-visible + & {
            position: relative;
            opacity: 1;
            pointer-events: initial;
        }
    }
}

