{
  "common.ok": "Ok",
  "common.cancel": "Cancel",
  "common.create": "Create",
  "common.delete": "Delete",
  "common.edit": "Edit",
  "common.save": "Save",
  "common.back": "Back",
  "common.next": "Next",
  "common.apply": "Apply",

  "projectTitle": "Project {projectName}",
  "structure": "Structure",
  "design": "Design",
  "data": "Data",
  "settings": "Settings",
  "preview": "Preview",
  "publish": "Publish",
  "faq": "FAQ",
  "showComponentsTitle": "Show component's title",
  "showPlaceholders": "Show placeholders",
  "toggleFullScreen": "Toggle Full Screen",

  "structure.routeEditorTitle": "Route configuration",
  "structure.noRouteSelected": "Select a route",
  "structure.route": "Route",
  "structure.routeTitle": "Route title",
  "structure.createNewRoute": "Create new route",
  "structure.createNewRootRoute": "Create new root route",
  "structure.newRoute": "New route",
  "structure.newRootRoute": "New root route",
  "structure.deleteRouteQuestion": "Delete route?",
  "structure.title": "Title",
  "structure.path": "Path",
  "structure.pathErrorMessage": "Path can only contain letters, numbers, dashes and underscores",
  "structure.routeAlreadyExistsMessage": "Route {path} already exists",
  "structure.deleteRouteConfirmationMessage": "All child routes will be deleted too.",
  "structure.redirectTo": "Redirect to",
  "structure.indexRoute": "Index route",
  "structure.indexRedirect": "Index redirect",
  "structure.routeProperties": "Route properties",
  "structure.indexRouteProperties": "Index route properties",

  "description": "Description",

  "elementsTree": "Elements tree",
  "componentConfiguration": "Component configuration",
  "enterTitle": "Enter title",
  "componentsLibrary": "Components library",
  "deleteThisComponentQuestion": "Are you sure you want to delete this component?",
  "selectLayout": "Select layout",
  "deleteComponent": "Delete component",

  "selectAComponent": "Select a component",
  "multipleComponentsSelected": "Multiple components selected",
  "thisComponentDoesntHaveEditableAttributes": "This component doesn't have editable attributes",
  "propsEditor.systemProps.visible.name": "Visible",
  "propsEditor.systemProps.visible.desc": "",
  "props.component.setComponent": "Set component",
  "props.component.editComponent": "Edit component",
  "props.componentPicker.pickComponent": "Pick component",
  "addValue": "Add item",
  "addValueDialogTitle": "Add item",
  "addValueNameInputLabel": "Name",

  "linkDialog.sources": "Sources",
  "linkDialog.source.owner": "Owner component",
  "linkDialog.source.data": "Data",
  "linkDialog.source.dataContext": "Context - {context}",
  "linkDialog.source.function": "Function",
  "linkDialog.function.library": "Library functions",
  "linkDialog.function.user": "User functions",
  "linkDialog.function.create": "Create a new function",
  "linkDialog.function.backToList": "Back to functions",
  "linkDialog.function.new.windowTitle": "New function",
  "linkDialog.function.new.title": "Title",
  "linkDialog.function.new.desc": "Description",
  "linkDialog.function.new.returnType": "Return type",
  "linkDialog.function.new.argsList": "Arguments list",
  "linkDialog.function.new.newArg.button": "New Argument",
  "linkDialog.function.new.newArg.heading": "New Argument",
  "linkDialog.function.new.newArg.title": "Name",
  "linkDialog.function.new.newArg.type": "Type",
  "linkDialog.function.new.newArg.add": "Add argument",

  "actionsEditor.addAction": "Add action",
  "actionsEditor.actionType": "Action type",
  "actionsEditor.actionType.method": "Call method",
  "actionsEditor.actionType.prop": "Change prop value",
  "actionsEditor.actionType.navigate": "Change route",
  "actionsEditor.actionType.url": "Open URL",
  "actionsEditor.actionType.logout": "Logout",
  "actionsEditor.actionForm.url": "URL",
  "actionsEditor.actionForm.urlWindow": "Window",
  "actionsEditor.actionForm.urlWindow.same": "Same window",
  "actionsEditor.actionForm.urlWindow.new": "New window",
  "actionsEditor.actionForm.route": "Route",
  "actionsEditor.actionForm.targetComponent": "Target component",
  "actionsEditor.actionForm.method": "Method",
  "actionsEditor.actionForm.method.placeholder": "Select method",
  "actionsEditor.actionForm.prop": "Property",
  "actionsEditor.actionForm.prop.placeholder": "Select property",
  "actionsEditor.actionForm.propValue": "New value",
  "actionsEditor.actionTitle.mutation": "{mutationTitle}",
  "actionsEditor.actionTitle.method": "Call '{method}' of '{componentTitle}'",
  "actionsEditor.actionTitle.prop": "Change value of '{propName}' of '{componentTitle}'",
  "actionsEditor.actionTitle.navigate": "Navigate to '{routeName}'",
  "actionsEditor.actionTitle.url.sameWindow": "Open {url}",
  "actionsEditor.actionTitle.url.newWindow": "Open {url} in a new window",
  "actionsEditor.actionTitle.logout": "Logout",
  "actionsEditor.onSuccess": "On success",
  "actionsEditor.onError": "On error",

  "uncategorizedComponents": "Uncategorized",

  "thereAreNoComponentsInThisRoute": "There are no components in this route",

  "noComponentsCanBeInsertedInsideSelectedComponent": "No components can be inserted inside selected component",
  "showAllComponents": "Show all components",
  "noComponentsInLibrary": "No components in library",

  "sources": "Sources",
  "query": "Query",
  "functions": "Functions",
  "context": "Context",
  "state": "State",
  "ownerComponent": "Owner component",
  "dataWindowTitle": "{propName} data",
  "dataWindowContextField": "{fieldName} - context ({fieldPath})",
  "allArguments": "All arguments",
  "argumentsForField": "{name} arguments",
  "pleaseFillAllRequiredArguments": "Please, fill all required arguments",

  "fields": "Fields",
  "typeName": "Type: {name} {kind}",
  "listKind": "list",
  "connectionKind": "connection",
  "backTo": "Back to {name}",
  "setArguments": "Set arguments",

  "types.string": "String",
  "types.int": "Integer number",
  "types.float": "Number",
  "types.bool": "Boolean",
  "types.oneOf": "One of",
  "types.object": "Object",
  "types.objectOf": "Object of",
  "types.shape": "Shape",
  "types.array": "Array",
  "types.arrayOf": "Array of",
  "types.func": "Function",
  "types.component": "Component"
}
